[tox]
package = wheel
wheel_build_env = .pkg
requires =
    tox>=4
env_list = lint, type, py{310,311,312,py}, coverage
minversion = 4.6.0
skipsdist = True


[flake8]
extend-exclude = .vscode,.github,build,dist,.venv
#max-complexity = 10


[gh-actions]
python =
    3.10: py310, coverage
    3.11: py311, coverage
    3.12: py312, coverage
    pypy-3.10: pypy, coverage

[deps]
py3x = pipenv

[coverage:run]
omit = tests/*

[coverage:report]
show_missing = true
include = app/*
omit = tests/*
exclude_lines =
    pragma: no cover
    if TYPE_CHECKING:


[base]
passenv=HOME
coverage_percent = 95
set_env =
    PYTHONPATH = {toxinidir}:{toxinidir}/app
install =
    pipenv install --dev

[testenv]
allowlist_externals =
    echo
    false
# This and the next few testenvs are a workaround for
# https://github.com/tox-dev/tox/issues/2858.
commands =
    echo "Unrecognized environment name {envname}"
    python -VV
    false

[testenv:py{310,311,312,py}]
passenv = {[base]passenv}
description = run the tests for {env_name}
depends = lint, type
deps = {[deps]py3x}
commands =
    {[base]install}
    pipenv run unittest -b

[testenv:coverage]
passenv = {[base]passenv}
description = run the tests coverage
deps = {[deps]py3x}
    coverage >= 7
commands =
    {[base]install}
    pipenv run coverage run -m unittest
    pipenv run coverage report --fail-under {[base]coverage_percent}
    pipenv run coverage xml -o "cov.xml"

[testenv:format]
passenv = {[base]passenv}
description = run formatter
skip_install = true
deps = {[deps]py3x}
    black >= 22.12
commands =
    {[base]install}
    pipenv run black -v {posargs:app tests}

[testenv:lint]
passenv = {[base]passenv}
description = run linter
skip_install = true
deps = {[deps]py3x}
    flake8 >= 6.1.0
commands =
    {[base]install}
    pipenv run flake8 -v {posargs:app tests}

[testenv:type]
passenv = {[base]passenv}
description = run type checks
deps = {[deps]py3x}
    mypy >= 0.991
commands =
    {[base]install}
    pipenv run mypy {posargs:app tests}
